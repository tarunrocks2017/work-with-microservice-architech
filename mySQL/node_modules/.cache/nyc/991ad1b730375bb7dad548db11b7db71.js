var cov_1qmyzbs854=function(){var path="/home/tarun/Documents/MountBlueProjects/08-tarunharsh-microservice-project/mySQL/actors/actorController.js",hash="87cdee26cecabba21c667268491f99d9fa740284",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/home/tarun/Documents/MountBlueProjects/08-tarunharsh-microservice-project/mySQL/actors/actorController.js",statementMap:{"0":{start:{line:1,column:12},end:{line:1,column:63}},"1":{start:{line:3,column:27},end:{line:4,column:75}},"2":{start:{line:6,column:26},end:{line:6,column:118}},"3":{start:{line:8,column:26},end:{line:8,column:123}},"4":{start:{line:10,column:22},end:{line:11,column:98}},"5":{start:{line:13,column:33},end:{line:14,column:79}},"6":{start:{line:18,column:2},end:{line:25,column:3}},"7":{start:{line:19,column:23},end:{line:19,column:48}},"8":{start:{line:20,column:19},end:{line:20,column:61}},"9":{start:{line:21,column:4},end:{line:21,column:27}},"10":{start:{line:22,column:4},end:{line:22,column:18}},"11":{start:{line:24,column:4},end:{line:24,column:15}},"12":{start:{line:28,column:2},end:{line:34,column:3}},"13":{start:{line:29,column:23},end:{line:29,column:48}},"14":{start:{line:30,column:19},end:{line:30,column:82}},"15":{start:{line:31,column:4},end:{line:31,column:18}},"16":{start:{line:33,column:4},end:{line:33,column:16}},"17":{start:{line:38,column:2},end:{line:48,column:3}},"18":{start:{line:39,column:4},end:{line:39,column:31}},"19":{start:{line:40,column:22},end:{line:40,column:47}},"20":{start:{line:41,column:23},end:{line:41,column:92}},"21":{start:{line:42,column:18},end:{line:42,column:53}},"22":{start:{line:43,column:3},end:{line:43,column:26}},"23":{start:{line:44,column:3},end:{line:44,column:23}},"24":{start:{line:45,column:3},end:{line:45,column:17}},"25":{start:{line:47,column:3},end:{line:47,column:14}},"26":{start:{line:52,column:21},end:{line:52,column:46}},"27":{start:{line:53,column:17},end:{line:53,column:88}},"28":{start:{line:54,column:17},end:{line:54,column:47}},"29":{start:{line:55,column:17},end:{line:55,column:39}},"30":{start:{line:56,column:2},end:{line:56,column:28}},"31":{start:{line:57,column:2},end:{line:57,column:16}},"32":{start:{line:60,column:2},end:{line:67,column:3}},"33":{start:{line:61,column:23},end:{line:61,column:48}},"34":{start:{line:62,column:19},end:{line:62,column:70}},"35":{start:{line:63,column:19},end:{line:63,column:49}},"36":{start:{line:64,column:4},end:{line:64,column:18}},"37":{start:{line:66,column:4},end:{line:66,column:16}},"38":{start:{line:71,column:2},end:{line:79,column:3}},"39":{start:{line:72,column:23},end:{line:72,column:48}},"40":{start:{line:73,column:24},end:{line:73,column:93}},"41":{start:{line:74,column:19},end:{line:74,column:54}},"42":{start:{line:75,column:4},end:{line:75,column:27}},"43":{start:{line:76,column:4},end:{line:76,column:18}},"44":{start:{line:78,column:4},end:{line:78,column:17}},"45":{start:{line:83,column:2},end:{line:100,column:3}},"46":{start:{line:84,column:4},end:{line:84,column:46}},"47":{start:{line:85,column:23},end:{line:85,column:48}},"48":{start:{line:86,column:22},end:{line:92,column:5}},"49":{start:{line:93,column:24},end:{line:93,column:77}},"50":{start:{line:94,column:19},end:{line:94,column:54}},"51":{start:{line:95,column:4},end:{line:95,column:24}},"52":{start:{line:96,column:4},end:{line:96,column:18}},"53":{start:{line:98,column:4},end:{line:98,column:34}},"54":{start:{line:99,column:4},end:{line:99,column:17}},"55":{start:{line:104,column:2},end:{line:122,column:3}},"56":{start:{line:105,column:23},end:{line:105,column:48}},"57":{start:{line:106,column:4},end:{line:106,column:33}},"58":{start:{line:107,column:22},end:{line:114,column:5}},"59":{start:{line:115,column:24},end:{line:115,column:77}},"60":{start:{line:116,column:19},end:{line:116,column:54}},"61":{start:{line:117,column:4},end:{line:117,column:18}},"62":{start:{line:119,column:4},end:{line:119,column:35}},"63":{start:{line:120,column:4},end:{line:120,column:23}},"64":{start:{line:121,column:4},end:{line:121,column:17}},"65":{start:{line:125,column:0},end:{line:134,column:2}}},fnMap:{"0":{name:"getActors",decl:{start:{line:17,column:15},end:{line:17,column:24}},loc:{start:{line:17,column:27},end:{line:26,column:1}},line:17},"1":{name:"getMovieOption",decl:{start:{line:27,column:15},end:{line:27,column:29}},loc:{start:{line:27,column:32},end:{line:35,column:1}},line:27},"2":{name:"fetchActorDataById",decl:{start:{line:37,column:15},end:{line:37,column:33}},loc:{start:{line:37,column:38},end:{line:49,column:1}},line:37},"3":{name:"getActorById",decl:{start:{line:51,column:15},end:{line:51,column:27}},loc:{start:{line:51,column:32},end:{line:58,column:1}},line:51},"4":{name:"getNewlyAddedActor",decl:{start:{line:59,column:15},end:{line:59,column:33}},loc:{start:{line:59,column:45},end:{line:68,column:1}},line:59},"5":{name:"removeActorById",decl:{start:{line:70,column:15},end:{line:70,column:30}},loc:{start:{line:70,column:35},end:{line:80,column:1}},line:70},"6":{name:"addActor",decl:{start:{line:82,column:15},end:{line:82,column:23}},loc:{start:{line:82,column:37},end:{line:101,column:1}},line:82},"7":{name:"updateActorById",decl:{start:{line:103,column:15},end:{line:103,column:30}},loc:{start:{line:103,column:48},end:{line:123,column:1}},line:103}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const con=(cov_1qmyzbs854.s[0]++,require('../migrationScripts/sqlScripts/connectDB'));const SELECT_FROM_ACTORS=(cov_1qmyzbs854.s[1]++,`select m.moviename , m.movieid , actorid, ac.actorname , activeYear , ac.image_url
, totalmovies from actors ac inner join movies m on m.movieid = ac.movieid`);const INSERT_INTO_ACTOR=(cov_1qmyzbs854.s[2]++,'insert into actors(actorname,movieid,activeYear,image_url,totalmovies) values ( ?,?,?,?,?)');const UPDATE_INTO_ACTOR=(cov_1qmyzbs854.s[3]++,'update actors set actorname=?,movieid=?,activeYear=?,image_url=?,totalmovies=? where actorid= ?');const GET_NEW_ACTOR=(cov_1qmyzbs854.s[4]++,`select m.moviename , m.movieid , actorid, ac.actorname , activeYear , ac.image_url
, totalmovies from actors ac inner join movies m on m.movieid = ac.movieid where ac.actorname = ?`);const SELECT_FROM_ACTORS_BY_ID=(cov_1qmyzbs854.s[5]++,`select m.moviename , m.movieid , ac.actorname , activeyear , totalmovies, ac.image_url
from actors ac inner join movies m on m.movieid = ac.movieid where actorid = ?`);async function getActors(){cov_1qmyzbs854.f[0]++;cov_1qmyzbs854.s[6]++;try{const connection=(cov_1qmyzbs854.s[7]++,await con.getConnection());const result=(cov_1qmyzbs854.s[8]++,await connection.query(SELECT_FROM_ACTORS));cov_1qmyzbs854.s[9]++;await connection.end();cov_1qmyzbs854.s[10]++;return result;}catch(err){cov_1qmyzbs854.s[11]++;return err;}}async function getMovieOption(){cov_1qmyzbs854.f[1]++;cov_1qmyzbs854.s[12]++;try{const connection=(cov_1qmyzbs854.s[13]++,await con.getConnection());const result=(cov_1qmyzbs854.s[14]++,await connection.query('select moviename, movieid from movies'));cov_1qmyzbs854.s[15]++;return result;}catch(error){cov_1qmyzbs854.s[16]++;throw error;}}async function fetchActorDataById(id){cov_1qmyzbs854.f[2]++;cov_1qmyzbs854.s[17]++;try{cov_1qmyzbs854.s[18]++;console.log(`id is ${id}`);const connection=(cov_1qmyzbs854.s[19]++,await con.getConnection());const formatQuery=(cov_1qmyzbs854.s[20]++,await connection.format(SELECT_FROM_ACTORS_BY_ID,[parseInt(id,10)]));const result=(cov_1qmyzbs854.s[21]++,await connection.query(formatQuery));cov_1qmyzbs854.s[22]++;await connection.end();cov_1qmyzbs854.s[23]++;console.log(result);cov_1qmyzbs854.s[24]++;return result;}catch(err){cov_1qmyzbs854.s[25]++;return err;}}async function getActorById(id){cov_1qmyzbs854.f[3]++;const connection=(cov_1qmyzbs854.s[26]++,await con.getConnection());const format=(cov_1qmyzbs854.s[27]++,await connection.format('select * from actors where actorid = ?',[id]));const result=(cov_1qmyzbs854.s[28]++,await connection.query(format));const option=(cov_1qmyzbs854.s[29]++,await getMovieOption());cov_1qmyzbs854.s[30]++;result[0].option=option;cov_1qmyzbs854.s[31]++;return result;}async function getNewlyAddedActor(actorname){cov_1qmyzbs854.f[4]++;cov_1qmyzbs854.s[32]++;try{const connection=(cov_1qmyzbs854.s[33]++,await con.getConnection());const format=(cov_1qmyzbs854.s[34]++,await connection.format(GET_NEW_ACTOR,[actorname]));const result=(cov_1qmyzbs854.s[35]++,await connection.query(format));cov_1qmyzbs854.s[36]++;return result;}catch(error){cov_1qmyzbs854.s[37]++;throw error;}}async function removeActorById(id){cov_1qmyzbs854.f[5]++;cov_1qmyzbs854.s[38]++;try{const connection=(cov_1qmyzbs854.s[39]++,await con.getConnection());const formatQuery=(cov_1qmyzbs854.s[40]++,await connection.format('delete from actors where actorid = ?',[id]));const result=(cov_1qmyzbs854.s[41]++,await connection.query(formatQuery));cov_1qmyzbs854.s[42]++;await connection.end();cov_1qmyzbs854.s[43]++;return result;}catch(error){cov_1qmyzbs854.s[44]++;return error;}}async function addActor(actorObject){cov_1qmyzbs854.f[6]++;cov_1qmyzbs854.s[45]++;try{cov_1qmyzbs854.s[46]++;console.log('now here also request come');const connection=(cov_1qmyzbs854.s[47]++,await con.getConnection());const actorInfo=(cov_1qmyzbs854.s[48]++,[actorObject.actorname,actorObject.movieid,actorObject.activeYear,actorObject.image_url,actorObject.totalmovies]);const formatQuery=(cov_1qmyzbs854.s[49]++,await connection.format(INSERT_INTO_ACTOR,actorInfo));const result=(cov_1qmyzbs854.s[50]++,await connection.query(formatQuery));cov_1qmyzbs854.s[51]++;console.log(result);cov_1qmyzbs854.s[52]++;return result;}catch(error){cov_1qmyzbs854.s[53]++;console.log('in catch block');cov_1qmyzbs854.s[54]++;return error;}}async function updateActorById(id,actorObject){cov_1qmyzbs854.f[7]++;cov_1qmyzbs854.s[55]++;try{const connection=(cov_1qmyzbs854.s[56]++,await con.getConnection());cov_1qmyzbs854.s[57]++;console.log('try in update');const actorInfo=(cov_1qmyzbs854.s[58]++,[actorObject.actorname,actorObject.movieid,actorObject.activeYear,actorObject.image_url,actorObject.totalmovies,id]);const formatQuery=(cov_1qmyzbs854.s[59]++,await connection.format(UPDATE_INTO_ACTOR,actorInfo));const result=(cov_1qmyzbs854.s[60]++,await connection.query(formatQuery));cov_1qmyzbs854.s[61]++;return result;}catch(error){cov_1qmyzbs854.s[62]++;console.log('catch in update');cov_1qmyzbs854.s[63]++;console.log(error);cov_1qmyzbs854.s[64]++;return error;}}cov_1qmyzbs854.s[65]++;module.exports={getActors,removeActorById,addActor,updateActorById,getNewlyAddedActor,getMovieOption,getActorById,fetchActorDataById};